# Pyramid Poker: Standard Game Implementation Plan

**Date:** September 30, 2025
**Current Status:** Phase 1 Complete (No-Surrender working in single/multiplayer)
**Next Goal:** Implement Phase 2 (Standard Game with full rules)

---

## 🎯 Core Architecture Decisions

### **Universal Systems (All Game Variants)**

1. **Chips/Economic System**
   - ALL variants use chips (not just standard game)
   - Starting chips: 1000 per player
   - Ante per round: Configurable (default: 20)
   - Points-to-chips multiplier: Configurable (default: 2×)
   - Pot system: Winner takes all

2. **Configurable Settings Per Table**
   ```javascript
   tableSettings = {
       // Core Settings
       gameVariant: "standard" | "no-surrender",
       maxPlayers: 2-6,
       maxRounds: 3-10,
       wildCards: 0-4,

       // Economic Settings (Universal)
       anteAmount: 20,
       chipsPerPoint: 2,
       startingChips: 1000,

       // Hand Ranking (Universal)
       handRankingSystem: "straight-over-flush" | "flush-over-straight",

       // Variant-Specific Features
       allowSurrender: boolean,
       checkAutomatics: boolean,
       showKitty: boolean  // 13+4 vs all 17
   }
   ```

3. **Hand Rankings**
   - Configurable per table
   - **Straight > Flush** (Pyramid Poker default)
   - **Flush > Straight** (Traditional poker)
   - Future: Custom ranking systems

---

## 🎮 Game Variant Comparison

| Feature | No-Surrender | Standard Game |
|---------|--------------|---------------|
| **Cards Dealt** | All 17 visible | 13 visible, 4 hidden |
| **Surrender Option** | No | Yes (pay 10 penalty) |
| **Automatic Wins** | No | Yes (Dragon, etc.) |
| **Ante** | 20 chips | 20 chips |
| **Scoring** | 2× points = chips | 2× points = chips |
| **Complexity** | Simple/Fast | Strategic/Complex |

---

## 📋 Detailed Implementation Roadmap

### **PHASE 1: Universal Chip System** 🎯 START HERE

**Goal:** Get economic system working for ALL game modes

#### **Step 1.1: Player Chip Tracking**
```javascript
// Add to Player class
class Player {
    constructor(name) {
        this.name = name;
        this.chips = 1000;      // Starting bankroll
        this.reloads = 0;       // Track chip reloads
        this.roundScore = 0;    // Points this round
        this.tournamentScore = 0; // Total points
    }

    canAffordAnte(ante) {
        return this.chips >= ante;
    }

    payAnte(ante) {
        if (!this.canAffordAnte(ante)) {
            this.autoReload(500);
        }
        this.chips -= ante;
        return ante;
    }

    autoReload(amount) {
        this.chips += amount;
        this.reloads++;
        console.log(`💰 ${this.name} auto-reloaded +${amount} chips`);
    }

    winChips(amount) {
        this.chips += amount;
    }
}
```

**Files to Modify:**
- `js/core/player.js` - Add chip properties
- `js/core/game.js` - Initialize player chips

**Testing:**
- Create players, verify starting chips = 1000
- Test `payAnte()` - chips should decrease
- Test auto-reload when chips < ante

---

#### **Step 1.2: Pot Management**
```javascript
// Add to Game class
class Game {
    constructor() {
        // ... existing properties
        this.pot = 0;
        this.potContributors = new Map();
    }

    collectAnte() {
        console.log('💰 Collecting ante from all players...');
        const ante = this.tableSettings.anteAmount;

        this.players.forEach(player => {
            const paid = player.payAnte(ante);
            this.pot += paid;
            this.potContributors.set(player.name, paid);
        });

        console.log(`💰 Pot: ${this.pot} chips`);
        this.updatePotDisplay();
    }

    distributePot(winner) {
        const winAmount = this.pot;
        winner.winChips(winAmount);
        console.log(`🏆 ${winner.name} wins ${winAmount} chips!`);

        this.pot = 0;
        this.potContributors.clear();
        this.updatePotDisplay();
    }

    updatePotDisplay() {
        const potElement = document.getElementById('potAmount');
        if (potElement) {
            potElement.textContent = this.pot;
        }
    }
}
```

**Files to Modify:**
- `js/core/game.js` - Add pot properties and methods

**Testing:**
- Start round, verify ante collected from all players
- Verify pot = ante × player count
- Verify pot display updates

---

#### **Step 1.3: Score-to-Chips Conversion**
```javascript
// Modify scoring phase in game.js
function finalizeRoundScoring() {
    // Calculate round-robin scores (existing)
    const roundScores = calculateRoundRobinScores();

    // Convert points to chips
    const multiplier = this.tableSettings.chipsPerPoint;

    roundScores.forEach((points, playerName) => {
        const chips = points * multiplier;
        const player = this.getPlayerByName(playerName);
        player.roundScore = points;
        // Chips distributed via pot winner
    });

    // Determine pot winner (highest score)
    const winner = this.getHighestScorer(roundScores);
    this.distributePot(winner);

    // Show scoring popup with chip amounts
    showScoringPopup(this, roundScores, multiplier);
}
```

**Files to Modify:**
- `js/core/game.js` - Modify scoring phase
- `js/ui/scoring-popup.js` - Show chip amounts

**Testing:**
- Complete a round
- Verify winner gets pot
- Verify chip amounts = points × 2
- Verify all players' chip counts update

---

#### **Step 1.4: UI Updates**
```html
<!-- Add to game area -->
<div class="pot-display">
    <h3>💰 Current Pot</h3>
    <div id="potAmount" class="pot-amount">0</div>
    <span>chips</span>
</div>

<div class="player-chips">
    <h3>Your Chips</h3>
    <div id="playerChips" class="chip-count">1000</div>
</div>

<!-- Add to player list -->
<div class="player-chip-display">
    <span class="player-name">Player 1</span>
    <span class="chip-amount">850 💰</span>
</div>
```

**Files to Modify:**
- `index.html` - Add pot and chip displays
- `styles.css` - Style chip displays
- `js/ui/display.js` - Update player list with chips

**CSS Example:**
```css
.pot-display {
    background: linear-gradient(135deg, #ffd700, #ffed4e);
    border: 3px solid #b8860b;
    border-radius: 15px;
    padding: 20px;
    text-align: center;
    margin: 20px 0;
}

.pot-amount {
    font-size: 48px;
    font-weight: bold;
    color: #2c3e50;
}

.chip-count {
    font-size: 32px;
    font-weight: bold;
    color: #4ecdc4;
}
```

**Testing:**
- Verify pot displays during round
- Verify player chip counts visible
- Verify updates after round ends

---

#### **Step 1.5: Chip Persistence**
```javascript
// Save/load player chips
function savePlayerChips(playerName, chips, reloads) {
    const bankroll = {
        chips: chips,
        reloads: reloads,
        lastUpdated: new Date().toISOString()
    };
    localStorage.setItem(`bankroll_${playerName}`, JSON.stringify(bankroll));
}

function loadPlayerChips(playerName) {
    const saved = localStorage.getItem(`bankroll_${playerName}`);
    if (saved) {
        const bankroll = JSON.parse(saved);
        return bankroll.chips;
    }
    return 1000; // Default starting chips
}

// Call on game end
function onTournamentEnd() {
    this.players.forEach(player => {
        savePlayerChips(player.name, player.chips, player.reloads);
    });
}

// Call on game start
function initializePlayerChips() {
    this.players.forEach(player => {
        player.chips = loadPlayerChips(player.name);
    });
}
```

**Files to Modify:**
- `js/core/game.js` - Add save/load on tournament start/end

**Testing:**
- Play tournament, end with different chip count
- Start new tournament, verify chips persisted
- Test with multiple player names

---

### **PHASE 2: Hand Ranking System**

**Goal:** Make hand rankings configurable per table

#### **Step 2.1: Ranking System Registry**
```javascript
// js/hands/hand-ranking-systems.js

const RANKING_SYSTEMS = {
    'straight-over-flush': {
        name: "Straight > Flush (Pyramid Poker)",
        description: "Straights beat flushes",
        handOrder: [
            'high-card',      // 0
            'pair',           // 1
            'two-pair',       // 2
            'three-of-a-kind',// 3
            'flush',          // 4 - Lower
            'straight',       // 5 - Higher
            'full-house',     // 6
            'four-of-a-kind', // 7
            'straight-flush', // 8
            'five-of-a-kind', // 9
            // Special large hands
            '6-straight-flush', // 10
            '6-of-a-kind',      // 11
            '7-straight-flush', // 12
            '7-of-a-kind',      // 13
            '8-straight-flush', // 14
            '8-of-a-kind'       // 15
        ]
    },

    'flush-over-straight': {
        name: "Flush > Straight (Traditional)",
        description: "Flushes beat straights (traditional poker)",
        handOrder: [
            'high-card',
            'pair',
            'two-pair',
            'three-of-a-kind',
            'straight',       // 4 - Lower
            'flush',          // 5 - Higher
            'full-house',
            'four-of-a-kind',
            'straight-flush',
            'five-of-a-kind',
            '6-straight-flush',
            '6-of-a-kind',
            '7-straight-flush',
            '7-of-a-kind',
            '8-straight-flush',
            '8-of-a-kind'
        ]
    }
};

function getHandRank(handType, rankingSystem = 'straight-over-flush') {
    const system = RANKING_SYSTEMS[rankingSystem];
    const rank = system.handOrder.indexOf(handType);
    return rank >= 0 ? rank : -1;
}

function compareHandTypes(hand1Type, hand2Type, rankingSystem) {
    const rank1 = getHandRank(hand1Type, rankingSystem);
    const rank2 = getHandRank(hand2Type, rankingSystem);

    if (rank1 > rank2) return 1;
    if (rank1 < rank2) return -1;
    return 0; // Same type, need kicker comparison
}
```

**Files to Create:**
- `js/hands/hand-ranking-systems.js` - New file

**Testing:**
- Test straight vs flush in both systems
- Verify rankings match expected order

---

#### **Step 2.2: Integrate Ranking System**
```javascript
// Modify existing hand comparison function
function compareHands(hand1, hand2, rankingSystem = 'straight-over-flush') {
    // First compare by hand type using ranking system
    const typeComparison = compareHandTypes(
        hand1.handType,
        hand2.handType,
        rankingSystem
    );

    if (typeComparison !== 0) {
        return typeComparison;
    }

    // Same type - use existing kicker comparison
    return compareHandRanks(hand1.hand_rank, hand2.hand_rank);
}
```

**Files to Modify:**
- `js/hands/card-evaluation.js` - Update hand comparison
- `js/core/game.js` - Pass ranking system to comparisons

**Testing:**
- Create test hands (straight vs flush)
- Verify correct winner in both ranking systems
- Test with all hand types

---

### **PHASE 3: Table Settings & UI**

**Goal:** Let users configure game variant and settings

#### **Step 3.1: Table Settings Object**
```javascript
// Default settings for variants
const VARIANT_DEFAULTS = {
    'no-surrender': {
        anteAmount: 20,
        chipsPerPoint: 2,
        startingChips: 1000,
        handRankingSystem: 'straight-over-flush',
        allowSurrender: false,
        checkAutomatics: false,
        showKitty: false
    },
    'standard': {
        anteAmount: 20,
        chipsPerPoint: 2,
        startingChips: 1000,
        handRankingSystem: 'straight-over-flush',
        allowSurrender: true,
        checkAutomatics: true,
        showKitty: true
    }
};

function createTableSettings(variant, customSettings = {}) {
    const defaults = VARIANT_DEFAULTS[variant];
    return {
        gameVariant: variant,
        ...defaults,
        ...customSettings
    };
}
```

**Files to Modify:**
- `js/core/game-config.js` - Add variant defaults

---

#### **Step 3.2: Lobby UI for Table Creation**
```html
<!-- Table creation form -->
<div id="createTableForm">
    <h2>Create New Table</h2>

    <div class="form-group">
        <label>Game Variant:</label>
        <select id="gameVariant">
            <option value="no-surrender">No-Surrender (Quick Play)</option>
            <option value="standard">Standard Game (Full Rules)</option>
        </select>
    </div>

    <div class="form-group">
        <label>Max Players:</label>
        <input type="number" id="maxPlayers" min="2" max="6" value="4">
    </div>

    <div class="form-group">
        <label>Number of Rounds:</label>
        <select id="maxRounds">
            <option value="3">3 Rounds</option>
            <option value="5">5 Rounds</option>
            <option value="10">10 Rounds</option>
        </select>
    </div>

    <div class="form-group">
        <label>Wild Cards:</label>
        <input type="number" id="wildCards" min="0" max="4" value="2">
    </div>

    <h3>Economic Settings</h3>
    <div class="form-group">
        <label>Ante per Round:</label>
        <input type="number" id="anteAmount" value="20" min="1">
        <span>chips</span>
    </div>

    <div class="form-group">
        <label>Points Multiplier:</label>
        <input type="number" id="chipsPerPoint" value="2" min="1">
        <span>× (points to chips)</span>
    </div>

    <h3>Hand Rankings</h3>
    <div class="form-group">
        <label>
            <input type="radio" name="ranking" value="straight-over-flush" checked>
            Straight > Flush (Pyramid Poker)
        </label>
        <label>
            <input type="radio" name="ranking" value="flush-over-straight">
            Flush > Straight (Traditional)
        </label>
    </div>

    <button onclick="createTable()">Create Table</button>
</div>
```

**Files to Modify:**
- `index.html` or lobby screen - Add creation form
- `js/ui/lobby.js` - Handle form submission

---

#### **Step 3.3: Table Listing Display**
```javascript
function renderTableListing(table) {
    const variant = table.settings.gameVariant;
    const icon = variant === 'standard' ? '💰' : '🎯';
    const variantName = variant === 'standard' ? 'Standard Game' : 'No-Surrender';

    const minChips = table.settings.anteAmount * table.settings.maxRounds;

    return `
        <div class="table-listing">
            <div class="table-header">
                ${icon} ${table.tableName} - ${variantName}
            </div>
            <div class="table-info">
                <span>Players: ${table.playerCount}/${table.settings.maxPlayers}</span>
                <span>Rounds: ${table.settings.maxRounds}</span>
                <span>Ante: ${table.settings.anteAmount}</span>
                <span>Wilds: ${table.settings.wildCards}</span>
            </div>
            <div class="table-features">
                ${table.settings.allowSurrender ? '✓ Surrender' : ''}
                ${table.settings.checkAutomatics ? '✓ Automatics' : ''}
                <span>${table.settings.chipsPerPoint}× points</span>
            </div>
            <div class="table-requirements">
                Requires ${minChips}+ chips to play
            </div>
            <button onclick="joinTable('${table.tableId}')">Join</button>
        </div>
    `;
}
```

**Files to Modify:**
- `js/ui/lobby.js` - Render table listings

**Testing:**
- Create tables with different settings
- Verify all settings display correctly
- Join table, verify settings applied

---

### **PHASE 4: Standard Game Features**

**Goal:** Implement 13+4 kitty, surrender, and automatics

#### **Step 4.1: Simplified Card Dealing (13+4)**
```javascript
function dealCardsForRound() {
    // Deal all 17 cards as usual
    this.deck.dealHands(this.players, 17);

    // For standard game, hide last 4 cards initially
    if (this.tableSettings.showKitty) {
        this.players.forEach(player => {
            player.visibleCards = player.cards.slice(0, 13);
            player.kittyCards = player.cards.slice(13, 17);
            console.log(`${player.name}: 13 visible, 4 kitty hidden`);
        });
    } else {
        // No-surrender: show all 17
        this.players.forEach(player => {
            player.visibleCards = player.cards;
            player.kittyCards = [];
        });
    }

    this.updateCardDisplay();
}

function revealKittyCards(player) {
    player.visibleCards = player.cards; // Show all 17
    this.updateCardDisplay();
    console.log(`${player.name}: Kitty revealed! Now has 17 cards.`);
}
```

**Files to Modify:**
- `js/core/game.js` - Modify dealing logic
- `js/ui/display.js` - Display only visible cards

**Testing:**
- Start standard game
- Verify only 13 cards shown
- Verify 4 cards hidden from view

---

#### **Step 4.2: Play/Surrender Decision UI**
```html
<!-- Decision popup -->
<div id="surrenderDecisionPopup" class="modal">
    <div class="modal-content">
        <h2>🎲 Decision Time</h2>
        <p>You have <span id="visibleCardCount">13</span> cards.</p>
        <p>Current pot: <span id="currentPot">80</span> chips</p>

        <div class="decision-options">
            <button class="btn-play" onclick="game.decidePlay()">
                ▶️ PLAY
                <small>Reveal 4 kitty cards and continue</small>
            </button>

            <button class="btn-surrender" onclick="game.decideSurrender()">
                🏳️ SURRENDER
                <small>Pay 10 chips penalty and fold</small>
            </button>
        </div>

        <div class="chip-warning">
            ⚠️ Surrendering costs 10 more chips
        </div>
    </div>
</div>
```

**JavaScript:**
```javascript
async function showSurrenderDecision() {
    return new Promise((resolve) => {
        this.surrenderDecisionResolve = resolve;
        document.getElementById('surrenderDecisionPopup').style.display = 'block';
        document.getElementById('currentPot').textContent = this.pot;
    });
}

function decidePlay() {
    console.log('Player chose to PLAY');
    this.currentPlayer.status = 'playing';
    this.revealKittyCards(this.currentPlayer);
    document.getElementById('surrenderDecisionPopup').style.display = 'none';
    this.surrenderDecisionResolve('play');
}

function decideSurrender() {
    console.log('Player chose to SURRENDER');
    this.currentPlayer.status = 'surrendered';

    // Pay penalty
    const penalty = 10;
    this.currentPlayer.chips -= penalty;
    this.pot += penalty;

    // Hide cards
    this.currentPlayer.visibleCards = [];

    document.getElementById('surrenderDecisionPopup').style.display = 'none';
    this.surrenderDecisionResolve('surrender');
}
```

**Files to Modify:**
- `index.html` - Add decision popup
- `js/core/game.js` - Add decision methods
- `styles.css` - Style decision popup

---

#### **Step 4.3: AI Surrender Decision**
```javascript
function aiDecideSurrender(aiPlayer) {
    // Evaluate 13-card hand strength
    const handStrength = evaluateThirteenCardHand(aiPlayer.visibleCards);

    // Calculate surrender threshold
    const potOdds = this.pot / 10; // Cost to continue vs pot size
    const playerCount = this.getActivePlayers().length;
    const winProbability = estimateWinProbability(handStrength, playerCount);

    // Expected value calculation
    const evPlay = (winProbability * this.pot) - (1 - winProbability) * this.pot/playerCount;
    const evSurrender = -10;

    // Decision
    if (evPlay > evSurrender) {
        console.log(`🤖 ${aiPlayer.name} PLAYS (EV: ${evPlay.toFixed(1)})`);
        aiPlayer.status = 'playing';
        this.revealKittyCards(aiPlayer);
        return 'play';
    } else {
        console.log(`🤖 ${aiPlayer.name} SURRENDERS (EV: ${evPlay.toFixed(1)} < -10)`);
        aiPlayer.status = 'surrendered';
        aiPlayer.chips -= 10;
        this.pot += 10;
        aiPlayer.visibleCards = [];
        return 'surrender';
    }
}

function evaluateThirteenCardHand(cards) {
    // Simplified evaluation
    const detector = new HandDetector(cards);
    const hands = detector.detectAllHands();

    // Count strong hands (can make good arrangements)
    const strongHands = hands.hands.filter(h =>
        ['straight', 'flush', 'full-house', 'four-of-a-kind'].includes(h.handType)
    );

    return {
        strongHandCount: strongHands.length,
        bestHand: hands.hands[0],
        hasAutomaticPotential: checkDragonPotential(cards)
    };
}

function estimateWinProbability(handStrength, playerCount) {
    // Simple heuristic
    const baseProb = 1 / playerCount;
    const strengthBonus = handStrength.strongHandCount * 0.1;
    return Math.min(0.9, baseProb + strengthBonus);
}
```

**Files to Modify:**
- `js/core/game.js` - Add AI decision logic
- `js/hands/hand-detector.js` - May need 13-card evaluation

**Testing:**
- Start game with AI players
- Verify AI makes reasonable decisions
- Strong hands → usually play
- Weak hands → usually surrender

---

#### **Step 4.4: Automatic Win Detection**
```javascript
// js/hands/automatic-wins.js - NEW FILE

class AutomaticWinDetector {
    static PRECEDENCE = {
        'three-full-houses': 4,
        'dragon': 3,
        'three-straights': 2,
        'three-flushes': 1
    };

    static detectAutomatic(arrangement) {
        // Check in precedence order
        if (this.hasThreeFullHouses(arrangement)) {
            return { type: 'three-full-houses', precedence: 4 };
        }
        if (this.hasDragon(arrangement)) {
            return { type: 'dragon', precedence: 3, acesuit: this.getDragonAceSuit(arrangement) };
        }
        if (this.hasThreeStraights(arrangement)) {
            return { type: 'three-straights', precedence: 2 };
        }
        if (this.hasThreeFlushes(arrangement)) {
            return { type: 'three-flushes', precedence: 1 };
        }
        return null; // No automatic
    }

    static hasDragon(arrangement) {
        // Combine all three hands
        const allCards = [
            ...arrangement.back.cards,
            ...arrangement.middle.cards,
            ...arrangement.front.cards
        ];

        // Check for A-K-Q-J-10-9-8-7-6-5-4-3-2
        const ranks = ['A','K','Q','J','10','9','8','7','6','5','4','3','2'];
        const foundRanks = new Set(allCards.map(c => c.rank));

        return ranks.every(rank => foundRanks.has(rank));
    }

    static getDragonAceSuit(arrangement) {
        const allCards = [
            ...arrangement.back.cards,
            ...arrangement.middle.cards,
            ...arrangement.front.cards
        ];
        const ace = allCards.find(c => c.rank === 'A');
        return ace ? ace.suit : '♠'; // Default spades
    }

    static hasThreeFullHouses(arrangement) {
        return arrangement.back.handType === 'full-house' &&
               arrangement.middle.handType === 'full-house' &&
               arrangement.front.handType === 'full-house';
    }

    static hasThreeStraights(arrangement) {
        return arrangement.back.handType === 'straight' &&
               arrangement.middle.handType === 'straight' &&
               arrangement.front.handType === 'straight';
    }

    static hasThreeFlushes(arrangement) {
        return arrangement.back.handType === 'flush' &&
               arrangement.middle.handType === 'flush' &&
               arrangement.front.handType === 'flush';
    }

    static compareAutomatics(auto1, auto2) {
        // Higher precedence wins
        if (auto1.precedence > auto2.precedence) return 1;
        if (auto1.precedence < auto2.precedence) return -1;

        // Same type
        if (auto1.type === 'dragon' && auto2.type === 'dragon') {
            return this.compareDragonSuits(auto1.acesuit, auto2.acesuit);
        }

        // Same type (three FH/straights/flushes) - compare hands
        return 0; // Hand-by-hand comparison needed
    }

    static compareDragonSuits(suit1, suit2) {
        const suitRank = { '♠': 4, '♥': 3, '♦': 2, '♣': 1 };
        return suitRank[suit1] - suitRank[suit2];
    }
}
```

**Files to Create:**
- `js/hands/automatic-wins.js` - New file

**Testing:**
- Create test arrangements with each automatic
- Verify detection works
- Test precedence ordering
- Test Dragon suit tiebreaker

---

#### **Step 4.5: Automatic Win Scoring**
```javascript
function scoreRoundWithAutomatics() {
    const arrangements = new Map();
    const automatics = new Map();

    // Get all arrangements and check automatics
    this.getActivePlayers().forEach(player => {
        arrangements.set(player.name, player.arrangement);
        const automatic = AutomaticWinDetector.detectAutomatic(player.arrangement);
        if (automatic) {
            automatics.set(player.name, automatic);
            console.log(`🏆 ${player.name} has automatic: ${automatic.type}`);
        }
    });

    const scores = new Map();
    const players = Array.from(arrangements.keys());

    // Score head-to-head
    for (let i = 0; i < players.length; i++) {
        for (let j = i + 1; j < players.length; j++) {
            const p1 = players[i];
            const p2 = players[j];

            const auto1 = automatics.get(p1);
            const auto2 = automatics.get(p2);

            if (auto1 && !auto2) {
                // P1 has automatic, P2 doesn't
                scores.set(p1, (scores.get(p1) || 0) + 3);
                scores.set(p2, (scores.get(p2) || 0) - 3);
            } else if (!auto1 && auto2) {
                // P2 has automatic, P1 doesn't
                scores.set(p2, (scores.get(p2) || 0) + 3);
                scores.set(p1, (scores.get(p1) || 0) - 3);
            } else if (auto1 && auto2) {
                // Both have automatics - compare
                const comparison = AutomaticWinDetector.compareAutomatics(auto1, auto2);
                if (comparison > 0) {
