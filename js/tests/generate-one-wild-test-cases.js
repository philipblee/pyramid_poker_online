// js/tests/generate-one-wild-test-cases.js
// Node.js script to generate test cases with exactly 1 wild card + 16 non-wild cards
// Usage: node generate-one-wild-test-cases.js [count]
// Default count: 10, can be overridden (e.g., node generate-one-wild-test-cases.js 20)

const fs = require('fs');
const path = require('path');

// Get count from command line argument, default to 10
const count = parseInt(process.argv[2]) || 10;

console.log(`🃏 Generating ${count} one-wild test cases...`);

// Standard deck (2 decks for variety)
const suits = ['♠', '♥', '♦', '♣'];
const ranks = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

// Create full deck pool (2 decks)
const fullDeck = [];
for (let deck = 0; deck < 2; deck++) {
    for (const suit of suits) {
        for (const rank of ranks) {
            fullDeck.push(`${rank}${suit}`);
        }
    }
}

// Fisher-Yates shuffle
function shuffleArray(array) {
    const shuffled = [...array];
    for (let i = shuffled.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
    }
    return shuffled;
}

// Generate random test cases
function generateTestCases(numCases) {
    const testCases = [];

    for (let i = 1; i <= numCases; i++) {
        // Shuffle the full deck and take first 16 cards
        const shuffledDeck = shuffleArray(fullDeck);
        const nonWildCards = shuffledDeck.slice(0, 16);

        // Add wild card at random position (0-16)
        const wildPosition = Math.floor(Math.random() * 17);
        const allCards = [...nonWildCards];
        allCards.splice(wildPosition, 0, '🃏');

        // Create test case
        const testCase = {
            id: i,
            name: `One Wild Random ${i}`,
            cards: allCards.join(' ')
        };

        testCases.push(testCase);

        console.log(`Generated case ${i}: Wild at position ${wildPosition + 1}/17`);
    }

    return testCases;
}

// Generate the test cases
const testCases = generateTestCases(count);

// Create the output JavaScript file content
const fileContent = `// js/tests/one-wild-test-cases.js
// Test cases with exactly 1 wild card + 16 non-wild cards
// Generated by generate-one-wild-test-cases.js

const ONE_WILD_TEST_CASES = [
${testCases.map(testCase => `    {
        id: ${testCase.id},
        name: "${testCase.name}",
        cards: "${testCase.cards}"
    }`).join(',\n')}
];

// Export for use in other modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { ONE_WILD_TEST_CASES };
}
`;

// Write to file
const outputPath = path.join(__dirname, 'one-wild-test-cases.js');
fs.writeFileSync(outputPath, fileContent, 'utf8');

console.log(`\n✅ Generated ${count} test cases`);
console.log(`📁 Saved to: ${outputPath}`);
console.log(`🎯 Each case has exactly 1 wild card (🃏) + 16 non-wild cards`);
console.log(`\n🔄 To generate more cases later:`);
console.log(`   node generate-one-wild-test-cases.js 20`);

// Show first few examples
console.log(`\n📋 Sample cases:`);
testCases.slice(0, 3).forEach(testCase => {
    const wildIndex = testCase.cards.split(' ').indexOf('🃏');
    console.log(`   ${testCase.id}: ${testCase.name} (wild at position ${wildIndex + 1})`);
    console.log(`      ${testCase.cards.substring(0, 50)}...`);
});