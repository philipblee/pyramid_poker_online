// js/utilities/count-valid-hands-from-cards.js
// Adapter to use count-valid-hands.js with card objects instead of strings

/**
 * Count valid hands from card objects (adapter for count-valid-hands.js)
 * @param {Array} cardObjects - Array of card objects
 * @returns {Object} Hand counts object (same format as count-valid-hands)
 */
function countValidHandsFromCards(cardObjects) {
    // Step 1: Convert to Card Model format (reuse existing proven function)
    const properCards = convertToCardModel(cardObjects);

    // Step 2: Filter out wild cards and convert to string format
    const cardString = properCards
        .filter(card => !card.isWild)
        .map(card => card.rank + card.suit)
        .join(' ');

    // Step 3: Use existing proven count-valid-hands logic
    const counter = new CountValidHands();
    const result = counter.calculateExpectedCounts(cardString);

    // Step 4: Add natural4K calculation (like analyze-cards.js)
    result.natural4K = counter.calculateNatural4K(cardString);

    return result;
}

// Test function
function testCountValidHandsFromCards() {
    console.log('\nðŸ§ª Testing Count Valid Hands From Cards');

    // Test with the quad cards we've been using
    const test16CardsWithQuads = [
        // Four Aces (4K #1)
        {id: 'Aâ™ _1', rank: 'A', suit: 'â™ ', value: 14, isWild: false},
        {id: 'Aâ™¥_2', rank: 'A', suit: 'â™¥', value: 14, isWild: false},
        {id: 'Aâ™¦_3', rank: 'A', suit: 'â™¦', value: 14, isWild: false},
        {id: 'Aâ™£_4', rank: 'A', suit: 'â™£', value: 14, isWild: false},

        // Four Kings (4K #2)
        {id: 'Kâ™ _5', rank: 'K', suit: 'â™ ', value: 13, isWild: false},
        {id: 'Kâ™¥_6', rank: 'K', suit: 'â™¥', value: 13, isWild: false},
        {id: 'Kâ™¦_7', rank: 'K', suit: 'â™¦', value: 13, isWild: false},
        {id: 'Kâ™£_8', rank: 'K', suit: 'â™£', value: 13, isWild: false},

        // Random scattered cards (8 more)
        {id: '7â™ _9', rank: '7', suit: 'â™ ', value: 7, isWild: false},
        {id: '3â™¥_10', rank: '3', suit: 'â™¥', value: 3, isWild: false},
        {id: '8â™¦_11', rank: '8', suit: 'â™¦', value: 8, isWild: false},
        {id: '5â™£_12', rank: '5', suit: 'â™£', value: 5, isWild: false},
        {id: '2â™ _13', rank: '2', suit: 'â™ ', value: 2, isWild: false},
        {id: '9â™¥_14', rank: '9', suit: 'â™¥', value: 9, isWild: false},
        {id: '6â™¦_15', rank: '6', suit: 'â™¦', value: 6, isWild: false},
        {id: '4â™£_16', rank: '4', suit: 'â™£', value: 4, isWild: false}
    ];

    console.log(`\nðŸ“‹ Testing with ${test16CardsWithQuads.length} card objects`);

    // Test the adapter
    const result = countValidHandsFromCards(test16CardsWithQuads);

    console.log('\nðŸ“Š Results:');
    console.log(`   Four of a Kind: ${result.fourOfAKind}`);
    console.log(`   Five of a Kind: ${result.fiveOfAKind}`);
    console.log(`   Straights: ${result.straight}`);
    console.log(`   Total hands: ${result.total}`);

    return result;
}